/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/**********************************************************

    Following is the Binary Tree Node structure:

    template <typename T>
    class BinaryTreeNode {
        public: 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }

        ~BinaryTreeNode() {
            if (left)
                delete left;
            if (right)
                delete right;
        }
    };
***********************************************************/
// #include<bits/stdc++.h>

class BSTiterator
{
    stack<TreeNode *> mySt;
//     reverse->true=before
//     reverse->false=next
    bool reverse=1;
    public:
    BSTiterator(TreeNode *root,bool isReverse)
    {
     reverse=isReverse;
     pushAll(root);   
    }

    int next()
    {
        TreeNode* tmp=mySt.top();
        mySt.pop();
        if(!reverse)
        pushAll(tmp->right);
        else 
        pushAll(tmp->left);
        return tmp->val;
    }

    bool hasNext()
    {
        return !mySt.empty();
    }
    private:
    void pushAll(TreeNode* node){
        for(;node!=NULL;){
            mySt.push(node);
            if(!reverse){
               node=node->left; 
            }else{
                node=node->right;
            }
        }
    }
};


class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        if(!root) return 0;
    BSTiterator l(root,false);
    BSTiterator r(root,true);
    int i=l.next();
    int j=r.next();
    while(i<j){
        if(i+j==k) return true;
        else if(i+j<k) i=l.next();
        else j=r.next();
    }return 0;
    }
};
