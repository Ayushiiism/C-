#include<bits/stdc++.h>
int dp[1001][1001];
int solve(vector<int> &val, vector<int> &wt, int n, int w){
    if(n<0||w==0) return 0;
//     if(n==0){
//         if(wt[0]<=w) return val[0];
//         else return 0;
//     }
    if(dp[n][w]!=-1) return dp[n][w];
    int pick=INT_MIN;
    if(wt[n]<=w)
    pick=val[n]+solve(val,wt,n-1,w-wt[n]);
    int notpick=solve(val,wt,n-1,w);
    return dp[n][w]=max(pick,notpick);
}
int maxProfit(vector<int> &values, vector<int> &weights, int n, int w)
{
    memset(dp,-1,sizeof(dp));
	return solve(values,weights,n-1,w);
}
