#include<bits/stdc++.h>

int solve(int arr[],int i,int prevind,int n,vector<vector<int>>&dp){
    if(i==n) return 0;
    if(dp[n][prevind+1]!=-1) return dp[n][prevind+1];
    int take=INT_MIN;
    if(prevind==-1||arr[i]>arr[prevind]){
        take=1+solve(arr,i+1,i,n,dp);
    }
    int notTake=0+solve(arr,i+1,prevind,n,dp);
    return dp[n][prevind+1]=max(take,notTake);
}
int longestIncreasingSubsequence(int arr[], int n)
{
    vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
    return solve(arr,0,-1,n,dp);
}


//not completely submitted
