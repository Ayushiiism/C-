
#include<bits/stdc++.h>
bool dfs(int node,vector<int>graph[],vector<int>&vis,vector<int>&dfsvis){
    vis[node]=1;
    dfsvis[node]=1;
    for(int i:graph[node]){
        if(vis[i]==0){
            if(dfs(i,graph,vis,dfsvis)) return 1;
        }else if(dfsvis[i]==1) return 1;
    }dfsvis[node]=0;
    return 0;
}
int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
   vector<int> graph[n+1];
   int m=edges.size();
   for(int i=0;i<m;++i){
        int a=edges[i].first;
        int b=edges[i].second;
       graph[a].push_back(b);
   }
    vector<int>vis(n+1,0),dfsvis(n+1,0);
    for(int i=1;i<=n;++i){
        if(!vis[i]){
            if(dfs(i,graph,vis,dfsvis)) return 1;
        }
    }return 0;
}
