#include<bits/stdc++.h>
bool bfs(int src,vector<int> graph[],vector<int>col){
    queue<int>q;
    q.push(src);
    col[src]=1;
    while(!q.empty()){
        int node=q.front();
        q.pop();
        for(auto it:graph[node]){
            if(col[it]==-1){
                col[it]=1-col[node];
                q.push(it);
            }else if(col[it]==col[node])
                return 0;
        }
    }return 1;
}
bool isGraphBirpatite(vector<vector<int>> &edges) {
    int n=edges[0].size();
    vector<int>graph[n];    
    for(int i=0;i<n;++i){
        for(int j=0;j<n;++j){
            if(edges[i][j]==1){
                graph[i].push_back(j);
                graph[j].push_back(i);
            }
        }
    }
     vector<int>col(n,-1);
    for(auto i=0;i<n;++i){
        if(col[i]==-1){
            if(bfs(i,graph,col)==0) {
                return 0;
            }
        }
    }return 1;
}
