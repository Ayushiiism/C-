/*************************************************************

    Following is the Binary Tree node structure

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

*************************************************************/

vector<int> zigZagTraversal(BinaryTreeNode<int> *root)
{
    vector<int>ans;
         bool flag=1;
        if(root==NULL) return ans;
        queue<BinaryTreeNode<int> *>q;
        q.push(root);
        while(!q.empty()){
         int n=q.size();
         vector<int>tmp(n);
        for(int i=0;i<n;++i){
        BinaryTreeNode<int> * curr=q.front();
            q.pop();
            if(curr->left) q.push(curr->left);
            if(curr->right) q.push(curr->right);
            if(flag)
            tmp[i]=(curr->data);
            else 
            tmp[n-i-1]=curr->data;
        }flag=!flag;
        for(auto it:tmp) ans.push_back(it);
        
    }return ans;
        // Code here
}
